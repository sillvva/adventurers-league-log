generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    referentialIntegrity = "prisma"
    url                  = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String      @id @default(cuid())
    name          String?
    email         String?     @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    characters    Character[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Character {
    id                  String   @id @unique @default(cuid())
    name                String
    race                String?
    class               String?
    campaign            String?
    image_url           String?
    character_sheet_url String?
    user                User     @relation(fields: [userId], references: [id])
    userId              String
    games               Game[]
    created_at          DateTime @default(now())
}

model Game {
    id                  String        @id @unique @default(cuid())
    date                DateTime
    name                String
    description         String?
    dm                  DungeonMaster @relation(fields: [dungeonMasterId], references: [id])
    dungeonMasterId     String
    experience          Int
    acp                 Int
    tcp                 Int
    level               Int
    gold                Float
    magic_items_gained  MagicItem[]   @relation("magic_items_gained")
    magic_items_lost    MagicItem[]   @relation("magic_items_lost")
    story_awards_gained StoryAward[]  @relation("story_awards_gained")
    story_awards_lost   StoryAward[]  @relation("story_awards_lost")
    Character           Character?    @relation(fields: [characterId], references: [id])
    characterId         String?
    created_at          DateTime      @default(now())
}

model DungeonMaster {
    id    String @id @unique @default(cuid())
    name  String
    DCI   Int?
    games Game[]
}

model MagicItem {
    id           String  @id @unique @default(cuid())
    name         String
    description  String?
    GameGained   Game?   @relation("magic_items_gained", fields: [gameGainedId], references: [id])
    gameGainedId String?
    GameLost     Game?   @relation("magic_items_lost", fields: [gameLostId], references: [id])
    gameLostId   String?
}

model StoryAward {
    id           String   @id @unique @default(cuid())
    name         String
    description  String?
    lost         Boolean?
    GameGained   Game?    @relation("story_awards_gained", fields: [gameGainedId], references: [id])
    gameGainedId String?
    GameLost     Game?    @relation("story_awards_lost", fields: [gameLostId], references: [id])
    gameLostId   String?
}
